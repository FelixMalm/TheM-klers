@page "/AddHouse"
@using System.Net.Http
@using System.ComponentModel.DataAnnotations
@using System.Text.RegularExpressions
@inject HttpClient Http
@inject ILocalFileStorageService _LocalFileStorageService

<h3>Add Housing</h3>

@if (isError)
{
    <p class="text-danger">@errorMessage</p>
}

<div class="form-group">
    <label for="address">Address</label>
    <input type="text" class="form-control" @bind="newHousing.address" />
    <span class="text-danger">@GetValidationMessage("address")</span>
</div>

<div class="form-group">
    <label for="initialPrice">Initial Price</label>
    <input type="number" class="form-control" @bind="newHousing.initialPrice" />
    <span class="text-danger">@GetValidationMessage("initialPrice")</span>
</div>

<div class="form-group">
    <label for="livingArea">Living Area</label>
    <input type="number" class="form-control" @bind="newHousing.livingArea" />
    <span class="text-danger">@GetValidationMessage("livingArea")</span>
</div>

<div class="form-group">
    <label for="additionalArea">Additional Area</label>
    <input type="number" class="form-control" @bind="newHousing.additionalArea" />
    <span class="text-danger">@GetValidationMessage("additionalArea")</span>
</div>

<div class="form-group">
    <label for="plotArea">Plot Area</label>
    <input type="number" class="form-control" @bind="newHousing.plotArea" />
    <span class="text-danger">@GetValidationMessage("plotArea")</span>
</div>

<div class="form-group">
    <label for="description">Description</label>
    <textarea class="form-control" @bind="newHousing.description"></textarea>
    <span class="text-danger">@GetValidationMessage("description")</span>
</div>

<div class="form-group">
    <label for="numberOfRooms">Number of Rooms</label>
    <input type="number" class="form-control" @bind="newHousing.numberOfRooms" />
    <span class="text-danger">@GetValidationMessage("numberOfRooms")</span>
</div>

<div class="form-group">
    <label for="monthlyFee">Monthly Fee</label>
    <input type="number" class="form-control" @bind="newHousing.monthlyFee" />
    <span class="text-danger">@GetValidationMessage("monthlyFee")</span>
</div>

<div class="form-group">
    <label for="annualOperatingCost">Annual Operating Cost</label>
    <input type="number" class="form-control" @bind="newHousing.annualOperatingCost" />
    <span class="text-danger">@GetValidationMessage("annualOperatingCost")</span>
</div>

<div class="form-group">
    <label for="yearBuilt">Year Built</label>
    <input type="number" class="form-control" @bind="newHousing.yearBuilt" />
    <span class="text-danger">@GetValidationMessage("yearBuilt")</span>
</div>

<div class="form-group">
    <label for="brokerId">Broker</label>
    <select class="form-control" @bind="newHousing.brokerId">
        <option value="">Select Broker</option>
        @foreach (var broker in brokers)
        {
            <option value="@broker.id">@broker.firstName @broker.lastName</option>
        }
    </select>
    <span class="text-danger">@GetValidationMessage("brokerId")</span>
</div>

<div class="form-group">
    <label for="municipalityId">Municipality</label>
    <select class="form-control" @bind="newHousing.municipalityId">
        <option value="">Select Municipality</option>
        @foreach (var municipality in municipalities)
        {
            <option value="@municipality.id">@municipality.name</option>
        }
    </select>
    <span class="text-danger">@GetValidationMessage("municipalityId")</span>
</div>

<div class="form-group">
    <label for="categoryId">Category</label>
    <select class="form-control" @bind="newHousing.categoryId">
        <option value="">Select Category</option>
        @foreach (var category in categories)
        {
            <option value="@category.id">@category.name</option>
        }
    </select>
    <span class="text-danger">@GetValidationMessage("categoryId")</span>
</div>

<div>
    <InputFile multiple OnChange="@OnChange" />
</div>

<div class="image-container">
    @foreach (var imageSource in imageSources)
    {
        <img src="@imageSource" />
    }
</div>

<div class="form-group">
    <button class="btn btn-primary" @onclick="SaveHousing">Add Housing</button>
</div>

@code {
    private Housing newHousing = new Housing { Images = new List<string>() };
    private Dictionary<string, string> validationMessages = new Dictionary<string, string>();
    private bool isError = false;
    private string errorMessage = "";
    private List<Broker> brokers = new List<Broker>();
    private List<Municipality> municipalities = new List<Municipality>();
    private List<Category> categories = new List<Category>();

    private const int maxAllowedSize = 2 * 1024 * 1024; // 2 MB
    private List<string> imageSources = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            brokers = await Http.GetFromJsonAsync<List<Broker>>("https://localhost:7078/api/Broker");

            var housings = await Http.GetFromJsonAsync<List<Housing>>("https://localhost:7078/api/Housings");

            municipalities = housings.Select(h => h.municipality).Distinct().ToList();

            categories = housings.Select(h => h.category).Distinct().ToList();
        }
        catch (HttpRequestException httpEx)
        {
            isError = true;
            errorMessage = $"HTTP request error: {httpEx.Message}";
            Console.WriteLine($"HTTP request error: {httpEx.Message}");
        }
        catch (Exception ex)
        {
            isError = true;
            errorMessage = $"An error occurred: {ex.Message}";
            Console.WriteLine($"An error occurred: {ex.Message}");
        }
    }

    private async Task SaveHousing()
    {
        try
        {
            var validationResults = new List<ValidationResult>();
            var validationContext = new ValidationContext(newHousing, null, null);
            bool isValid = Validator.TryValidateObject(newHousing, validationContext, validationResults, true);

            if (!isValid)
            {
                validationMessages = validationResults.ToDictionary(vr => vr.MemberNames.FirstOrDefault() ?? "", vr => vr.ErrorMessage);
                return;
            }

            var imagePaths = await SaveImagesAndGetPathsAsync(newHousing.Images);

            newHousing.Images = imagePaths; 

            var response = await Http.PostAsJsonAsync("api/Housings", newHousing);

            if (response.IsSuccessStatusCode)
            {
                newHousing = new Housing { Images = new List<string>() }; 
                validationMessages.Clear();
                isError = false;
                errorMessage = "Housing added successfully!";
            }
            else
            {
                isError = true;
                errorMessage = "Failed to add housing. Please try again later.";
            }
        }
        catch (Exception ex)
        {
            isError = true;
            errorMessage = $"An error occurred while adding housing: {ex.Message}";
            Console.WriteLine($"Error: {ex.Message}"); 
        }
    }

    private async Task<List<string>> SaveImagesAndGetPathsAsync(List<string> images)
    {
        var imagePaths = new List<string>();
        foreach (var image in images)
        {
            if (IsBase64String(image))
            {
                try
                {
                    var imageData = Convert.FromBase64String(image);
                    using var memoryStream = new MemoryStream(imageData);
                    var imagePath = await _LocalFileStorageService.SaveFileAsync(memoryStream, Guid.NewGuid().ToString() + ".jpg");
                    imagePaths.Add(imagePath);
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error saving image: {ex.Message}");
                }
            }
            else
            {
                Console.WriteLine($"Invalid Base64 string: {image}");
            }
        }
        return imagePaths;
    }

    public bool IsBase64String(string s)
    {
        s = s.Trim();
        return (s.Length % 4 == 0) && Regex.IsMatch(s, @"^[a-zA-Z0-9\+/]*={0,3}$", RegexOptions.None);
    }

    public interface ILocalFileStorageService
    {
        Task<string> SaveFileAsync(Stream fileStream, string fileName);
    }

    public class LocalFileStorageService : ILocalFileStorageService
    {
        private readonly string _uploadPath = Path.Combine(Directory.GetCurrentDirectory(), "Uploads");

        public async Task<string> SaveFileAsync(Stream fileStream, string fileName)
        {
            if (!Directory.Exists(_uploadPath))
            {
                Directory.CreateDirectory(_uploadPath);
            }

            var filePath = Path.Combine(_uploadPath, fileName);

            using var fileStreamOut = new FileStream(filePath, FileMode.Create);
            await fileStream.CopyToAsync(fileStreamOut);

            return filePath;
        }
    }

    async Task OnChange(InputFileChangeEventArgs e)
    {
        foreach (var file in e.GetMultipleFiles())
        {
            using var stream = file.OpenReadStream(maxAllowedSize);
            var imageBytes = await ReadFully(stream);
            var base64String = Convert.ToBase64String(imageBytes);

            newHousing.Images.Add(base64String);
            imageSources.Add($"data:image/jpeg;base64,{base64String}");
        }

        Console.WriteLine($"Images count: {newHousing.Images.Count}");
    }


    async Task<byte[]> ReadFully(Stream input)
    {
        using var ms = new MemoryStream();
        await input.CopyToAsync(ms);
        return ms.ToArray();
    }

    private string GetValidationMessage(string key)
    {
        if (validationMessages.TryGetValue(key, out string message))
        {
            return message;
        }
        return "";
    }
}

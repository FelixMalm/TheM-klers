@page "/housings"
@using System.Net.Http
@using System.Text.Json
@using TheMäklersBlazor.Models
@inject HttpClient httpClient

<!-- Author Kim Jonsson -->

<h1>Housings</h1>

<div class="filters">
   
    <input type="text" placeholder="Search by ID" @bind="searchId" />

    
    <select @bind="selectedMunicipality">
        <option value="">All Municipalities</option>
        @foreach (var municipality in municipalities)
        {
            <option value="@municipality">@municipality</option>
        }
    </select>

    
    <select @bind="selectedCategory">
        <option value="">All Categories</option>
        @foreach (var category in categories)
        {
            <option value="@category">@category</option>
        }
    </select>
</div>

@if (housingList == null)
{
    <p>Loading...</p>
}
else
{


    <div class="housing-list">
        @foreach (var housing in filteredHousings)
        {
            <div class="housing-item">
                <div class="card-container">
                    <div class="image-container">
                        @if (housing.images.Any())
                        {
                            <img src="@housing.images.First()" alt="Housing Image" />
                        }
                        else
                        {
                            <img src="placeholder.jpg" alt="No Image Available" />
                        }
                    </div>
                    <div class="info-container">
                        <ul>
                            <li><strong>Address:</strong> @housing.address</li>
                            <li><strong>Initial Price:</strong> @housing.initialPrice</li>
                            <li><strong>Living Area:</strong> @housing.livingArea</li>
                            <li><strong>Agency:</strong> @housing.broker.agency.name</li>
                        </ul>
                        @if (!string.IsNullOrEmpty(housing.broker.agency.logoUrl))
                        {
                            <img src="@housing.broker.agency.logoUrl" alt="Agency Logo" class="agency-logo" />
                        }
                    </div>
                </div>
            </div>
        }
    </div>






}

@code {
    private Housing[] housingList;
    private Broker[] brokerList;
    private Agency[] agencyList;
    private string searchId = "";
    private string selectedMunicipality = "";
    private string selectedCategory = "";
    private string[] municipalities = { "Ale", "Alingsås", "Alvesta", "Aneby", "Arboga" }; 
    private string[] categories = { "Apartment", "Villas", "New production", "Leisure house" };

    protected override async Task OnInitializedAsync()
    {
        try
        {
            housingList = await httpClient.GetFromJsonAsync<Housing[]>("https://localhost:7078/api/Housings");
            brokerList = await httpClient.GetFromJsonAsync<Broker[]>("https://localhost:7078/api/Broker");
            agencyList = await httpClient.GetFromJsonAsync<Agency[]>("https://localhost:7078/api/Agency");
        }
        catch (Exception ex)
        {
            
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }

    
    private IEnumerable<Housing> filteredHousings
    {
        get
        {
            var filtered = housingList.AsEnumerable();

            if (!string.IsNullOrEmpty(searchId))
            {
                filtered = filtered.Where(h => h.id.ToString().Contains(searchId));
            }

            if (!string.IsNullOrEmpty(selectedMunicipality))
            {
                filtered = filtered.Where(h => h.municipality.name == selectedMunicipality);
            }

            if (!string.IsNullOrEmpty(selectedCategory))
            {
                filtered = filtered.Where(h => h.category.name == selectedCategory);
            }

            return filtered;
        }
    }
}

@page "/Broker"

@inject HttpClient Http

@code {
    private List<BrokerDto> Brokers;

    protected override async Task OnInitializedAsync()
    {
        Brokers = await Http.GetFromJsonAsync<List<BrokerDto>>("https://localhost:7078/api/Agency");
    }

    public class AgencyDto
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public string Presentation { get; set; }
        public string LogoUrl { get; set; }
    }

    public class BrokerDto
    {
        public int Id { get; set; }
        public string FirstName { get; set; }
        public string LastName { get; set; }
        public string Email { get; set; }
        public string PhoneNumber { get; set; }
        public string ImageUrl { get; set; }
        public Agency Agency { get; set; }
    }
}
@* 
@if (Brokers != null)
{
    foreach (var broker in Brokers)
    {
        <div>
            <h4>@broker.FirstName</h4>
            <p>@broker.Email</p>
            <img src="@broker.Agency.LogoUrl" alt="@broker.Agency.Name" />

            <h5>Brokers:</h5>
            @if (broker.Agency.Brokers != null && broker.Agency.Brokers.Any())
            {
                <ul>
                    @foreach (var subBroker in broker.Agency.Brokers)
                    {
                        <li>
                            <strong>@subBroker.FirstName @subBroker.LastName</strong>
                            <p>Email: @subBroker.Email</p>
                            <p>Phone: @subBroker.PhoneNumber</p>
                            @if (!string.IsNullOrEmpty(subBroker.ImageUrl))
                            {
                                <img src="@subBroker.ImageUrl" alt="@subBroker.FirstName @subBroker.LastName" />
                            }
                        </li>
                    }
                </ul>
            }
            else
            {
                <p>No brokers available for this agency.</p>
            }
        </div>
        <hr />
    }
}
else
{
    <p>Loading...</p>
} *@
